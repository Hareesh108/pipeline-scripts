pipeline {
    agent any

    // Specify tool installations configured in Jenkins
    tools {
        jdk 'jdk17'          // Use JDK 17
        maven 'maven3'       // Use Maven 3
    }
    
    // Define environment variables
    environment {
        SCANNER_HOME = tool 'sonar-scanner'  // Set SonarQube Scanner path
    }

    stages {
        stage('Git Checkout') {
            // Checkout code from Git repository
            steps {
                git branch: 'main', url: 'https://github.com/Hareesh108/Mission.git'
            }
        }

        stage('Compile') {
            // Compile the Java source code
            steps {
                sh 'mvn compile'
            }
        }

        stage('Test') {
            // Run tests but skip actual execution
            steps {
                sh "mvn test -DskipTests=true"
            }
        }

        stage('Trivy Scan') {
            // Perform security scan using Trivy
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('Sonar Qube') {
            // Perform code quality analysis with SonarQube
            steps {
                withSonarQubeEnv('sonar-token') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mission1 -Dsonar.projectName=Mission1 \
                        -Dsonar.java.binaries=.'''
                }
            }
        }
        
        stage('Build') {
            // Package the application
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        
        stage('Deploy artifacts to nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-file', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                        sh 'mvn deploy -DskipTests=true'
                 }
            }
        }
        
        stage('Docker image') {
            steps {
                script {
                       // This step should not normally be used in your script. Consult the inline help for details.
                        withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker build -t hareesh108/mission:latest ."
                    }
                }
            }
        }
        
        stage('Trivy docker image Scan') {
            // Perform security scan using Trivy
            steps {
                sh "trivy image --format table -o trivy-image-report.html hareesh108/mission:latest"
            }
        }
        
        stage('Docker image push') {
            steps {
                script {
                       // This step should not normally be used in your script. Consult the inline help for details.
                        withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker push hareesh108/mission:latest"
                    }
                }
            }
        }
        
      
        stage('Deploy to Container') {
            steps {
                script {
                    // Stop any existing container using the port
                    sh '''
                    PORT=8093
                    EXISTING_CONTAINER=$(docker ps -q --filter publish=$PORT)
                    if [ ! -z "$EXISTING_CONTAINER" ]; then
                        docker stop $EXISTING_CONTAINER
                        docker rm $EXISTING_CONTAINER
                    fi
                    '''

                    // Start a new container with the specified port mapping
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker run -d -p 8093:8080 hareesh108/mission:latest"
                    }
                }
            }
        }

        stage('Deploy to K8') {
            steps {
                withCredentials([file(credentialsId: 'k8-ca-cert', variable: 'CA_CERT_FILE'), string(credentialsId: 'k8-token-mission', variable: 'K8_TOKEN')]) {
                    script {
                        sh '''
                            export KUBECONFIG=$(mktemp)
                            kubectl config set-cluster kubernetes --certificate-authority=$CA_CERT_FILE --server=https://kubernetes.docker.internal:6443
                            kubectl config set-credentials admin --token=$K8_TOKEN
                            kubectl config set-context default --cluster=kubernetes --user=admin
                            kubectl config use-context default
                            kubectl apply -f ds.yml -n webapps
                            sleep 60
                        '''
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                withCredentials([file(credentialsId: 'k8-ca-cert', variable: 'CA_CERT_FILE'), string(credentialsId: 'k8-token-mission', variable: 'K8_TOKEN')]) {
                    script {
                        sh '''
                            export KUBECONFIG=$(mktemp)
                            kubectl config set-cluster kubernetes --certificate-authority=$CA_CERT_FILE --server=https://kubernetes.docker.internal:6443
                            kubectl config set-credentials admin --token=$K8_TOKEN
                            kubectl config set-context default --cluster=kubernetes --user=admin
                            kubectl config use-context default
                            kubectl get pods -n webapps
                            kubectl get svc -n webapps
                            kubectl port-forward svc/mission-ssvc 8091:8080 -n webapps &

                        '''
                    }
                }
            }
        }
        
    }
    
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                def body = """
                    <html>
                    <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                    <h2>${jobName} - Build ${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                    <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                    </div>
                    </body>
                    </html>
                """
                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'hareeshbhittam@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivy-image-report.html'
                )
            }
        }
    }
}
